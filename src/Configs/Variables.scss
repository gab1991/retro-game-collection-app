/*      FONTS     **/
$font-main: 'Kanit', sans-serif;
$font-neon-lamp: 'Warnes', cursive;

/*      PALETTE     **/
$content-underlayer-color: rgba(44, 44, 44, 0.7);
$footer-underlayer-color: rgba(82, 82, 82, 0.589);
$button-neon-color: (
  'basic': #65323e,
  'green': #569874,
  'gray': #434343,
  'red': #963e53,
  'disabled': #5a5a5a,
);
$nav-color: #422f44;
$basic-border-gray: rgba(82, 82, 82, 0.9);
$font-white: whitesmoke;
$blue-shine-color: #2196f3;
$red-shine-color: #f32f21;
//skeletons colors
$skeleton-color-100: #0a0a0a;
$skeleton-color-200: #858585;

/*      BREAKPOINTS     **/
$breakpoints: (
  'mobile': 600px,
  'tablet': 900px,
  'desktop': 1200px,
);

/*      DIMENSIONS     **/
$nav-height: 40px;
$footer-height: 40px;
$basic-content-width: 1200px;

/*      MIXINS     **/
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Please make sure it is defined in `$breakpoints` map.";
  }
}
@function getBtnColor($color) {
  @return map-get($button-neon-color, $color);
}
@function getBtnColor($color) {
  @return map-get($button-neon-color, $color);
}

@mixin flexCenter {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin w100v100 {
  width: 100%;
  height: 100%;
}
@mixin contentWidth {
  width: $basic-content-width;
  margin: 0 auto;
  @media (max-width: $basic-content-width) {
    width: 100%;
  }
}
@mixin minHeight {
  min-height: calc(100vh - #{$footer-height} - #{$nav-height});
}

@mixin customScrollBar($width, $custom-color...) {
  &::-webkit-scrollbar {
    width: $width;
  }
  &::-webkit-scrollbar-track {
    background-color: rgba(0, 0, 0, 0.1);
  }
  &::-webkit-scrollbar-thumb {
    @if length($custom-color) != 0 {
      background-color: $custom-color;
    } @else {
      background-color: rgb(82, 82, 82);
    }

    border-radius: 4px;
  }
}

@mixin basicSkeleton($backgroundClr) {
  position: relative;
  overflow: hidden;
  background-color: $backgroundClr;

  &::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-color: transparent;

    transform: translateX(-100%);

    background: linear-gradient(90deg, transparent 8%, lighten($backgroundClr, 6%), transparent 33%);

    animation: shimmer 2s infinite;
    content: '';
  }

  @keyframes shimmer {
    100% {
      transform: translateX(100%);
    }
  }
}

@mixin backgroungGradientTransition(
  $deg: 90deg,
  $color1: $skeleton-color-100,
  $color2: $skeleton-color-200,
  $time: 3s
) {
  background-image: linear-gradient($deg, $color1, $color2);
  background-size: 400% 400%;
  animation: gradient $time linear infinite;

  @keyframes gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
}

/*      EXPORTS     **/
:export {
  breakpoints : {
    tablet: map-get($breakpoints, 'tablet');
    mobile: map-get($breakpoints, 'mobile');
    desktop: map-get($breakpoints, 'desktop');
  }
  colors : {
    skeleton-color-100: $skeleton-color-100;
    skeleton-color-200: $skeleton-color-200;
  }
}
